(define-module (calculusrex list)
  :export (range
	   transpose
	   zip
	   set
	   set-
	   reduce
	   remove-element
	   path-join))

;; (load "/home/feral/.guile")

(define (path-join strings)
  (string-join strings "/"))

(define range
  (Î» xs
    (cond ((= (length xs) 1)
	   (let recur ((a 0) (b (car xs)))
	     (if (>= a b) '()
		 (cons a (recur (1+ a) b)))))
	  ((= (length xs) 2)
	   (let recur ((a (car xs)) (b (cadr xs)))
	     (if (>= a b) '()
		 (cons a (recur (1+ a) b))))))))

(define (transpose xss)
  (if (null? (car xss))
      '()
      (cons (map car xss)
	    (transpose (map cdr xss)))))

(transpose (let recur ((n 4))
	     (if (< n 1) '()
		 (cons (range 6) (recur (1- n))))))

(define (reduce f xs)
  (if (null? (cdr xs))
      (car xs)
      (f (car xs)
	 (reduce f (cdr xs)))))

(define (zip xs ys)
  (if (and (null? xs)
	   (null? ys))
      '()
      (cons (cons (car xs) (car ys))
	    (zip (cdr xs) (cdr ys)))))

(define (remove-element elem xs)
  (cond ((null? xs) '())
	((eq? (car xs) elem)
	 (remove-element elem (cdr xs)))
	(else
	 (cons (car xs)
	       (remove-element elem (cdr xs))))))

(define (set xs)
  (if (null? xs) '()
      (cons (car xs)
	    (set
	     (remove-element (car xs)
			     (cdr xs))))))

(define (set- xs)
  (cond ((null? xs) '())
	((member (car xs) (cdr xs))
	 (set- (cdr xs)))
	(else
	 (cons (car xs)
	       (set- (cdr xs))))))
